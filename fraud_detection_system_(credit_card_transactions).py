# -*- coding: utf-8 -*-
"""Fraud Detection System (Credit Card Transactions).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CEo7FKOrRJUiQ__kUVIKY5HE8EXWizH2
"""

"""
Fraud Detection System
----------------------
Detects fraudulent transactions using ML models with imbalanced data handling.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, roc_auc_score
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE

# -------------------------------
# 1. Load Dataset (replace with your path or online source)
# -------------------------------
def load_data():
    try:
        df = pd.read_csv("data/creditcard.csv")
    except:
        raise FileNotFoundError("Dataset not found. Please add creditcard.csv in data/ folder.")
    return df

# -------------------------------
# 2. Preprocess Data
# -------------------------------
def preprocess(df):
    X = df.drop("Class", axis=1)
    y = df["Class"]

    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

# -------------------------------
# 3. Handle Imbalanced Data with SMOTE
# -------------------------------
def balance_data(X_train, y_train):
    sm = SMOTE(random_state=42)
    X_res, y_res = sm.fit_resample(X_train, y_train)
    return X_res, y_res

# -------------------------------
# 4. Train Model
# -------------------------------
def train_model(X_train, y_train):
    clf = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)
    clf.fit(X_train, y_train)
    return clf

# -------------------------------
# 5. Evaluate Model
# -------------------------------
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]

    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

    auc = roc_auc_score(y_test, y_proba)
    print(f"ROC-AUC Score: {auc:.4f}")

# -------------------------------
# Main Script
# -------------------------------
if __name__ == "__main__":
    print("ðŸš€ Loading dataset...")
    df = load_data()

    print("ðŸ”„ Preprocessing...")
    X_train, X_test, y_train, y_test = preprocess(df)

    print("ðŸ“Š Handling imbalance with SMOTE...")
    X_res, y_res = balance_data(X_train, y_train)

    print("ðŸ¤– Training Random Forest...")
    model = train_model(X_res, y_res)

    print("âœ… Evaluating model...")
    evaluate_model(model, X_test, y_test)

    print("ðŸŽ‰ Done!")